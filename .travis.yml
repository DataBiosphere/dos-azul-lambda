language: python

python:
  - 2.7
  - 3.6

# One ElasticSearch domain is kept alive for dos-azul-lambda testing. Before
# testing, Travis will configure the ElasticSearch domain with two new, unique
# indexes, populated with data. This is so we can take advantage of an
# isolated-enough environment while avoiding the long start times required
# to start a new ElasticSearch instance.
env:
  global:
    - ES_HOST="search-dos-azul-test-f612cc56-upv6ilywi26bm2jb3xxgszqq7q.us-west-2.es.amazonaws.com"
    - DATA_OBJ_INDEX="dataobj_${RANDOM}"
    - DATA_BDL_INDEX="databdl_${RANDOM}"
    - TEST_ES_DOMAIN="dos-azul-test-f612cc56"

# Specifying `branches.only = ['master']` can cause tagged builds to
# not deploy. See travis-ci/travis-ci#2498 and travis-ci/travis-ci#1675.
# We can fix this by only build master and branches/tags that follow the
# format x.y.z.
branches:
  only:
    - master
    - /^\d+\.\d+(\.\d+)?(-\S*)?$/

stages:
  - linting
  - test
  - name: deploy
    if: type != pull_request

jobs:
  include:
    # If the linting stage fails, then none of the other stages will run.
    - stage: linting
      python: '3.6'
      install:
        - pip install -r dev-requirements.txt
      before_script: ignore
      script: ignore
      after_script: ignore
      script:
        - flake8 --select=E121,E123,E126,E226,E24,E704,W503,W504 --ignore=E501 app.py tests

    # We want to deploy dos-azul-lambda to `dev` on every commit to master
    # that builds successfully and to `staging` on every tagged commit to
    # master that builds successfully.
    - stage: deploy
      python: '3.6'
      before_script: ignore
      script: ignore
      after_script: ignore
      # A deficiency of using Travis's built-in Lambda provider is that we must
      # manually synchronize environment variables set in `.chalice/config.json`
      # and those specified for dos-azul-lambda-{dev,staging} specified below.
      # For more information, see `.chalice/README.md`.
      before_deploy:
        - chalice package --stage dev deploy-dev/
        - chalice package --stage staging deploy-staging/
      deploy:
        - provider: lambda
          function_name: 'dos-azul-lambda-dev'
          region: 'us-west-2'
          role: 'arn:aws:iam::719818754276:role/dos-azul-lambda-dev-api_handler'
          runtime: 'python3.6'
          module_name: 'app'
          handler_name: 'app'
          publish: false  # replace the existing deployment
          zip: 'deploy-dev/deployment.zip'
          on:
            repo: DataBiosphere/dos-azul-lambda
            branch: master
            python: '3.6'
        - provider: lambda
          function_name: 'dos-azul-lambda-staging'
          region: 'us-west-2'
          role: 'arn:aws:iam::719818754276:role/dos-azul-lambda-staging-api_handler'
          runtime: 'python3.6'
          module_name: 'app'
          handler_name: 'app'
          publish: false  # replace the existing deployment
          zip: 'deploy-staging/deployment.zip'
          on:
            branch: master
            repo: DataBiosphere/dos-azul-lambda
            python: '3.6'
            tags: true
      after_deploy:
        # Once we deploy, we should check to see if the lambda is alive and
        # well. We do this by making a request to the `/swagger.json` endpoint
        # and checking the return code. If it returns HTTP 200, everything
        # should be fine.
        - sleep 10  # Wait for AWS to catch up
        - curl -i https://dos.commons.ucsc-cgp-dev.org/swagger.json | grep "HTTP/1.1 200 OK"

install:
  - pip install -r dev-requirements.txt  # Needed for boto3
  - pip install -r requirements.txt

before_script:
  - python provision/provision.py populate ${TEST_ES_DOMAIN}
  - sleep 10  # Wait for ES to catch up

script:
  - nosetests

after_script:
  - python provision/provision.py raze ${TEST_ES_DOMAIN}
